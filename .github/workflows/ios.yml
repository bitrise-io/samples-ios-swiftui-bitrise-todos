name: iOS starter workflow

on: workflow_dispatch

jobs:
  xcode_analyze:
    name: Xcode Analyze
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bitrise Build Cache for Xcode
        env:
          BITRISE_BUILD_CACHE_AUTH_TOKEN: ${{ secrets.BITRISE_BUILD_CACHE_AUTH_TOKEN }}
          BITRISE_BUILD_CACHE_WORKSPACE_ID: ${{ secrets.BITRISE_BUILD_CACHE_WORKSPACE_ID }}
        run: |
          #!/usr/bin/env bash
          set -euxo pipefail
          
          # download Bitrise Build Cache CLI
          curl --retry 5 -sSfL 'https://raw.githubusercontent.com/bitrise-io/bitrise-build-cache-cli/main/install/installer.sh' | sh -s -- -b /tmp/bin -d
          
          # run the CLI to enable Bitrise build cache for Xcode
          /tmp/bin/bitrise-build-cache activate xcode --cache --cache-push
      - name: PATH test
        run: |
          #!/usr/bin/env bash
          set -euxo pipefail
          
          echo "$PATH"
      - name: Check Xcode Version
        run: xcodebuild -version
      - name: Analyze
        run: |
          ~/.bitrise-xcelerate/bin/xcodebuild "analyze" "-project" "Bitrise TODOs Sample.xcodeproj" "-scheme" "Bitrise TODOs Sample" "CODE_SIGNING_ALLOWED=NO" "COMPILER_INDEX_STORE_ENABLE=NO"
  # build:
  #   name: Build and Test default scheme using any available iPhone simulator
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set Default Scheme
  #       run: |
  #         scheme_list=$(xcodebuild -list -json | tr -d "\n")
  #         default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
  #         echo $default | cat >default
  #         echo Using default scheme: $default
  #     - name: Build
  #       env:
  #         scheme: ${{ 'default' }}
  #         platform: ${{ 'iOS Simulator' }}
  #       run: |
  #         # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
  #         device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
  #         if [ $scheme = default ]; then scheme=$(cat default); fi
  #         if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
  #         file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
  #         xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
  #     - name: Test
  #       env:
  #         scheme: ${{ 'default' }}
  #         platform: ${{ 'iOS Simulator' }}
  #       run: |
  #         # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
  #         device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
  #         if [ $scheme = default ]; then scheme=$(cat default); fi
  #         if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
  #         file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
  #         xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
